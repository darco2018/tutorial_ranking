# http://whitfin.io/speeding-up-maven-docker-builds/
# https://andrewlock.net/caching-docker-layers-on-serverless-build-hosts-with-multi-stage-builds---target,-and---cache-from/
# OPTIMIZES BUILT SIZE & BUILD_TIME

# docker build -f ./docker/Dockerfile-test-run --target builder --cache-from ustrd/tut-multi:builder -t ustrd/tut-multi:builder  .
# docker build -f ./docker/Dockerfile-test-run --cache-from ustrd/tut-multi:builder  --cache-from ustrd/tut-multi:latest  -t ustrd/tut-multi:02-04-2019  -t ustrd/tut-multi:latest  .
# docker run -it --rm -p 8080:8080 ustrd/tut-multi:latest

FROM maven:3.6.0-jdk-8-alpine as builder

COPY ./pom.xml ./pom.xml
RUN mvn dependency:go-offline -B
COPY ./src ./src
RUN mvn package

#  final base image --------------------------
#  copy across the build my-project-*.jar file, which we can then run in an image which contains just a JRE.
#  a JRE must be compatible with the JDK version you built with.
FROM openjdk:8u171-jre-alpine
RUN apk add bash
RUN apk add curl

WORKDIR /usr/src/app
EXPOSE 8080

# copy over the built artifact from the maven image
COPY --from=builder docker/*.jar  ./app.jar

# set the startup command to run your binary
ENTRYPOINT ["/bin/bash", "-c", "java -jar app.jar"]

# curl checks container port, not host's
HEALTHCHECK --interval=1m --timeout=5s CMD curl --fail http://localhost:8080/ || exit 1
