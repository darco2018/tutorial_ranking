def app



pipeline {

    options { skipDefaultCheckout() }

    agent {

        docker {
            image 'maven:3.6.0-jdk-8-alpine'
            args '-v /root/.m2:/root/.m2 -p 8080:8080' // --rm
        }
/*
        dockerfile {
            filename 'Dockerfile.build'
            dir 'build'
            customWorkspace '/some/other/path'
            label 'my-defined-label'
            additionalBuildArgs  '--build-arg version=1.0.2'
            args '-v /tmp:/tmp'
            registryUrl 'https://myregistry.com/'
            registryCredentialsId 'myPredefinedCredentialsInJenkins'
        }*/
    }

    tools {
        //maven 'apache-maven-3.0.1'
        //myDocker 'myDocker'
        // docker 'myDocker'
        //'org.jenkinsci.plugins.docker.commons.tools.DockerTool' 'org.jenkinsci.plugins.docker.commons.tools.DockerTool'
        //'myDocker' 'org.jenkinsci.plugins.docker.commons.tools.DockerTool'
        // 'org.jenkinsci.plugins.docker.commons.tools.DockerTool' 'myDocker'
        // 'docker' 'myDocker'
        'org.jenkinsci.plugins.docker.commons.tools.DockerTool' 'myDocker'
    }
    // withEnv
    environment {

        LOG_ABS_PATH = '/var/log/'
        //MIGRATION_ABS_PATH = '/var/migration/'
    }
/*

    stage('Initialize') {
        script {
        withTool in a scripted Pipeline
            def dockerHome = tool 'myDocker'
            env.PATH = "${dockerHome}/bin"
            sh 'docker version'
        }
    }
*/


    stages {
        /*stage('Install dependencies') {
            steps {
                script {
                    def dockerTool = tool name: 'docker', type: 'org.jenkinsci.plugins.docker.commons.tools.DockerTool'
                    withEnv(["DOCKER=${dockerTool}/bin"]) {
                        //stages
                        //here we can trigger: sh "sudo ${DOCKER}/docker ..."
                    }
                }
            }
        }*/

        stage('Preparation') {

            steps {


                script {
                    def dockerHome = tool 'myDocker'
                    env.PATH = "${dockerHome}/bin"
                    sh '$PATH'
                }
                echo 'Preparation...'
                deleteDir()
                checkout scm
                //  checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [],
                //         submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/darco2018/tutorial_ranking']]])

                sh 'env.PATH'
                sh 'printenv'

            }
        }
        stage('run-parallel-branches') {
            steps {
                parallel(
                        a: {
                            echo "Tests on Linux - building image"
                            /* script{
                                 app = docker.build("ustrd/testapp")
                             }*/

                        },
                        b: {
                            echo "Tests on Windows"
                        }
                )
            }
        }
/*

        stage('Test image') {
            */
/* Ideally, we would run a test framework against our image.
             * For this example, we're using a Volkswagen-type approach ;-) *//*

            steps {
                script {

                    app.inside {
                        sh 'echo "Tests passed"'
                    }

                }
            }
        }
*/

        stage('Push image') {
            /* Finally, we'll push the image with two tags:
             * First, the incremental build number from Jenkins
             * Second, the 'latest' tag.
             * Pushing multiple tags is cheap, as all the layers are reused. */
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub') {
                        app.push("${env.BUILD_NUMBER}")
                        app.push("latest")
                    }
                }
            }

        }

        stage('Build') {
            steps {
                echo 'Building...'
                //echo 'Database must be up...' ??!!
                //sh './scripts/run.sh'
                sh 'mvn -B -DskipTests clean package'
            }
        }
/*
        stage('Test') {
            steps {

                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                    // nie pownien image jako artifact byc ?!
                    archiveArtifacts 'docker/*jar'
                }
                success {
                    echo 'create ustrd/app image from thw work dir'
                    // nie pownien image jako artifact byc ?!
                    echo 'archive this image'
                    //archiveArtifacts 'docker/*jar'
                }
            }
        }
        */
        stage('Push image to dockerhub') {
            steps {
                echo 'send to dockerhub'

                script {
                    //docker.withRegistry('https://hub.docker.com/', 'dockerhub') {
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub') {
                        // def customImage = docker.build("my-image:${env.BUILD_ID}") https://registry.hub.docker.com

                        /* Push the container to the custom Registry */
                        // customImage.push()
                    }
                }

            }
        }
    }
}


/*


        //place more complex build steps (particularly for stages consisting of 2 or more steps) into separate shell script files like the deliver.sh file.
        stage('Deliver - Staging') {
            steps {
                echo 'Deliver - Staging...'
                echo 'Running mvn install - putting JAR to Jenkins local Maven repo...'
                echo 'Extracting the JARs name...'
                echo 'Runing the JAR http://localhost:8080/  ?!...'


                sh './jenkins/deliver.sh'



                //input message: 'Finished using the web site? (Click "Proceed" to continue)'

                //sh 'sleep 30' not working - app still running
                //sh 'curl -X POST localhost:8080/actuator/shutdown'
                //sh './deploy staging'
                //sh './run-smoke-tests'
            }
        }

        stage('Release ?!') {
            steps {
                echo 'Releasing...'

            }
        }

        stage('Sanity check') {
            steps {
                echo 'Sanity check...'
                //input "Does the staging environment look ok?"
            }
        }

        stage('Deploy - Production') {
            steps {
                echo 'Deploy - Staging...'
                //sh './deploy production'
            }
        }
    }
    */
